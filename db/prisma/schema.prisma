//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

enum AnswerStatus {
  APPROVED
  REJECTED
  WAITING
}

enum ResultUserType {
  PUBLIC
  CAMPUS
}

enum SurveyLogStatus {
  WAITING
  REVIEWED
}

/// @@allow('all', true)
model CampusUser {
  id         String       @id() @default(cuid())
  name       String
  /// @email
  email      String       @unique()
  /// @omit
  password   String
  image      String?
  role       String
  createdAt  DateTime     @default(now()) @map("created_at")
  updatedAt  DateTime     @updatedAt() @map("updated_at")
  campus     Campus?
  roleUser   RoleUser     @relation(fields: [role], references: [role])
  publicUser PublicUser[]

  @@map("campus_users")
}

/// @@allow('all', true)
model CampusAnswer {
  id               String       @id() @default(cuid())
  questionId       String       @map("question_id")
  optionId         String       @map("option_id")
  revisionOptionId String       @map("revision_option_id")
  campusId         String       @map("campus_id")
  year             String
  answerStatus     AnswerStatus @default(WAITING) @map("answer_status")
  reviewComment    String?      @map("review_comment")
  reviewDate       DateTime?    @map("review_date")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt() @map("updated_at")
  question         Question     @relation(fields: [questionId], references: [id])
  option           Option       @relation("CampusAnswer", fields: [optionId], references: [id])
  revisionOption   Option       @relation("ReviewerCampusAnswer", fields: [revisionOptionId], references: [id])
  campus           Campus       @relation(fields: [campusId], references: [campusId])

  @@unique([questionId, campusId, year])
  @@map("campus_answers")
}

/// @@allow('all', true)
model PublicAnswer {
  id               String       @id() @default(cuid())
  questionId       String       @map("question_id")
  optionId         String       @map("option_id")
  revisionOptionId String       @map("revision_option_id")
  campusId         String       @map("campus_id")
  userPublicId     String       @map("user_public_id")
  year             String
  answerStatus     AnswerStatus @default(WAITING) @map("answer_status")
  reviewComment    String?      @map("review_comment")
  reviewDate       DateTime?    @map("review_date")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt() @map("updated_at")
  question         Question     @relation(fields: [questionId], references: [id])
  option           Option       @relation("PublicAnswer", fields: [optionId], references: [id])
  revisionOption   Option       @relation("ReviewerPublicAnswer", fields: [revisionOptionId], references: [id])
  campus           Campus       @relation(fields: [campusId], references: [campusId])
  userPublic       PublicUser   @relation(fields: [userPublicId], references: [id])

  @@unique([questionId, userPublicId, campusId, year])
  @@map("public_answers")
}

/// @@deny('read', !statusPt)
/// @@allow('all', true)
model Campus {
  campusId        String            @id() @unique() @map("campus_id")
  codePt          String            @unique() @map("code_pt")
  statusPt        Boolean           @map("status_pt")
  accreditationPt String            @map("accreditation_pt")
  standingDate    DateTime          @map("standing_date")
  numberSkPt      String            @map("number_sk_pt")
  dateSkPt        DateTime          @map("date_sk_pt")
  address         String
  city            String
  postalCode      String            @map("postal_code")
  phoneNumber     String            @map("phone_number")
  faximile        String
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt() @map("updated_at")
  campusUser      CampusUser        @relation(fields: [campusId], references: [id])
  result          Result[]
  campusAnswer    CampusAnswer[]
  resultVariable  ResultVariable[]
  publicAnswer    PublicAnswer[]
  campusSurveyLog CampusSurveyLog[]

  @@map("campuses")
}

/// @@allow('all', true)
/// @@deny('read', !isActive)
model PublicUser {
  id              String            @id() @default(cuid())
  name            String
  /// @email
  email           String
  identifyNumber  String            @map("identify_number")
  role            String            @map("role")
  campusId        String            @map("campus_id")
  isActive        Boolean           @default(true) @map("is_active")
  year            String
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt() @map("updated_at")
  campusUser      CampusUser        @relation(fields: [campusId], references: [id])
  roleUser        RoleUser          @relation(fields: [role], references: [role])
  publicAnswer    PublicAnswer[]
  publicSurveyLog PublicSurveyLog[]

  @@map("public_users")
}

/// @@allow('all', true)
model Option {
  id                   String         @id() @default(cuid())
  questionId           String         @map("question_id")
  value                String
  point                Float
  createdAt            DateTime       @default(now()) @map("created_at")
  updatedAt            DateTime       @updatedAt() @map("updated_at")
  question             Question       @relation(fields: [questionId], references: [id])
  campusAnswer         CampusAnswer[] @relation("CampusAnswer")
  reviewerCampusAnswer CampusAnswer[] @relation("ReviewerCampusAnswer")
  publicAnswer         PublicAnswer[] @relation("PublicAnswer")
  reviewerPublicAnswer PublicAnswer[] @relation("ReviewerPublicAnswer")

  @@map("options")
}

/// @@allow('all', true)
/// @@deny('read', !isActive)
model Question {
  id                    String              @id() @default(cuid())
  question              String
  year                  String
  isActive              Boolean             @default(true) @map("is_active")
  variableOnFormGroupId String              @map("variable_on_form_group_id")
  createdAt             DateTime            @default(now()) @map("created_at")
  updatedAt             DateTime            @updatedAt() @map("updated_at")
  option                Option[]
  campusAnswer          CampusAnswer[]
  publicAnswer          PublicAnswer[]
  variableOnForm        VariableOnFormGroup @relation(fields: [variableOnFormGroupId], references: [id])

  @@map("questions")
}

/// @@allow('all', true)
/// @@deny('read', !isActive)
model FormGroup {
  id                  String                @id() @default(cuid())
  name                String
  description         String
  isActive            Boolean               @default(true) @map("is_active")
  isPublished         Boolean               @default(false) @map("is_published")
  year                String
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt() @map("updated_at")
  variableOnFormGroup VariableOnFormGroup[]
  roleOnFormGroup     RoleOnFormGroup[]

  @@map("form_groups")
}

/// @@allow('all', true)
model Result {
  id             String           @id() @default(cuid())
  campusId       String           @map("campus_id")
  result         String
  year           String
  isApproved     Boolean          @default(false) @map("is_approved")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt() @map("updated_at")
  campus         Campus           @relation(fields: [campusId], references: [campusId])
  resultVariable ResultVariable[]

  @@map("results")
}

/// @@allow('all', true)
model ResultVariable {
  id           String         @id() @default(cuid())
  resultId     String         @map("result_id")
  variableId   String         @map("variable_id")
  score        Float
  campusId     String         @map("campus_id")
  isApproved   Boolean        @default(false) @map("is_approved")
  year         String
  isPublicUser ResultUserType
  result       Result         @relation(fields: [resultId], references: [id])
  variable     Variable       @relation(fields: [variableId], references: [id])
  campus       Campus         @relation(fields: [campusId], references: [campusId])
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt() @map("updated_at")

  @@map("result_variables")
}

/// @@allow('all', true)
model Variable {
  id                    String                  @id() @default(cuid())
  alias                 String                  @unique()
  name                  String
  description           String
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt() @map("updated_at")
  resultVariable        ResultVariable[]
  levelIndexOnVariables LevelIndexOnVariables[]
  variableOnFormGroup   VariableOnFormGroup[]

  @@map("variables")
}

/// @@allow('all', true)
model LevelIndexOnVariables {
  id                       String     @id() @default(cuid())
  variableId               String     @map("variable_id")
  levelIndexId             String     @map("level_index")
  descriptionLevelVariable String     @map("description_level_variable")
  createdAt                DateTime   @default(now()) @map("created_at")
  updatedAt                DateTime   @updatedAt() @map("updated_at")
  levelIndex               LevelIndex @relation(fields: [levelIndexId], references: [id])
  variable                 Variable   @relation(fields: [variableId], references: [id])

  @@map("level_index_on_variables")
}

/// @@allow('all', true)
model LevelIndex {
  id                    String                  @id() @default(cuid())
  value                 String                  @map("value")
  description           String
  minPoint              Float                   @map("min_point")
  maxPoint              Float                   @map("max_point")
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime                @updatedAt() @map("updated_at")
  levelIndexOnVariables LevelIndexOnVariables[]

  @@map("level_indices")
}

/// @@allow('all', true)
model RoleUser {
  id              String            @id() @default(cuid())
  role            String            @unique()
  name            String
  idNumberType    String?           @map("id_number_type")
  isParticipant   Boolean           @default(true) @map("is_participant")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt() @map("updated_at")
  publicUser      PublicUser[]
  roleOnFormGroup RoleOnFormGroup[]
  campusUser      CampusUser[]

  @@map("role_users")
}

/// @@allow('all', true)
model RoleOnFormGroup {
  id          String    @id() @default(cuid())
  formGroupId String    @map("form_group_id")
  role        String    @map("role")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt() @map("updated_at")
  formGroup   FormGroup @relation(fields: [formGroupId], references: [id])
  roleUser    RoleUser  @relation(fields: [role], references: [role])

  @@unique([role, formGroupId])
  @@map("role_on_form_groups")
}

/// @@allow('all', true)
model VariableOnFormGroup {
  id              String            @id() @default(cuid())
  variableId      String            @map("variable_id")
  formGroupId     String            @map("form_group_id")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt() @map("updated_at")
  question        Question[]
  campusSurveyLog CampusSurveyLog[]
  publicSurveyLog PublicSurveyLog[]
  variable        Variable          @relation(fields: [variableId], references: [id])
  formGroup       FormGroup         @relation(fields: [formGroupId], references: [id])

  @@unique([formGroupId, variableId])
  @@map("variable_on_form_groups")
}

/// @@allow('all', true)
model CampusSurveyLog {
  id                    String              @id() @default(cuid())
  campusId              String              @map("campus_id")
  variableOnFormGroupId String              @map("variable_on_form_group_id")
  status                SurveyLogStatus
  campus                Campus              @relation(fields: [campusId], references: [campusId])
  variableOnFormGroup   VariableOnFormGroup @relation(fields: [variableOnFormGroupId], references: [id])
  createdAt             DateTime            @default(now()) @map("created_at")
  updatedAt             DateTime            @updatedAt() @map("updated_at")

  @@unique([campusId, variableOnFormGroupId])
  @@map("campus_survey_logs")
}

/// @@allow('all', true)
model PublicSurveyLog {
  id                    String              @id() @default(cuid())
  publicUserId          String              @map("public_user_id")
  variableOnFormGroupId String              @map("variable_on_form_group_id")
  status                SurveyLogStatus
  publicUser            PublicUser          @relation(fields: [publicUserId], references: [id])
  variableOnFormGroup   VariableOnFormGroup @relation(fields: [variableOnFormGroupId], references: [id])
  createdAt             DateTime            @default(now()) @map("created_at")
  updatedAt             DateTime            @updatedAt() @map("updated_at")

  @@unique([publicUserId, variableOnFormGroupId])
  @@map("public_survey_logs")
}

/// @@allow('all', true)
model UrlPublicSurvey {
  id        String   @id() @default(cuid())
  payload   Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  @@map("url_public_survey")
}
